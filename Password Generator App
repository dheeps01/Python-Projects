import random
import string
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk

def generate_password():
    try:
        length = int(length_entry.get())
        complexity = complexity_var.get()

        if length <= 0:
            messagebox.showerror("Invalid Input", "Password length must be a positive number.")
            return

        if complexity == 1:
            characters = string.ascii_lowercase
        elif complexity == 2:
            characters = string.ascii_letters + string.digits
        elif complexity == 3:
            characters = string.ascii_letters + string.digits + string.punctuation
        else:
            messagebox.showerror("Invalid Input", "Please select a valid complexity level.")
            return

        password = ''.join(random.choice(characters) for _ in range(length))
        password_entry.delete(0, tk.END)
        password_entry.insert(0, password)
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a numeric value for the length.")

# Create the main window
app = tk.Tk()
app.title("Password Generator")
app.geometry("500x400")
app.configure(bg="#d9e4f5")

# Title Label
title_label = tk.Label(app, text="Password Generator", font=("Helvetica", 18, "bold"), bg="#d9e4f5", fg="#333333")
title_label.place(relx=0.5, y=30, anchor="center")

# Password Length
length_frame = tk.Frame(app, bg="#d9e4f5")
length_frame.place(relx=0.5, y=100, anchor="center")
length_label = tk.Label(length_frame, text="Password Length:", font=("Helvetica", 12), bg="#d9e4f5", fg="#333333")
length_label.grid(row=0, column=0, padx=10)
length_entry = ttk.Entry(length_frame, width=10)
length_entry.grid(row=0, column=1, padx=10)

# Complexity Level
complexity_frame = tk.Frame(app, bg="#d9e4f5")
complexity_frame.place(relx=0.5, y=160, anchor="center")
complexity_label = tk.Label(complexity_frame, text="Complexity:", font=("Helvetica", 12), bg="#d9e4f5", fg="#333333")
complexity_label.grid(row=0, column=0, padx=10, pady=5)

complexity_var = tk.IntVar(value=1)
complexity_low = ttk.Radiobutton(complexity_frame, text="Low (Lowercase only)", variable=complexity_var, value=1, style="Custom.TRadiobutton")
complexity_low.grid(row=1, column=0, sticky="w", padx=10)
complexity_medium = ttk.Radiobutton(complexity_frame, text="Medium (Letters and digits)", variable=complexity_var, value=2, style="Custom.TRadiobutton")
complexity_medium.grid(row=2, column=0, sticky="w", padx=10)
complexity_high = ttk.Radiobutton(complexity_frame, text="High (Letters, digits, special characters)", variable=complexity_var, value=3, style="Custom.TRadiobutton")
complexity_high.grid(row=3, column=0, sticky="w", padx=10)

# Customize Button and Radiobutton Styles
style = ttk.Style()
style.configure("Custom.TButton", font=("Helvetica", 14, "bold"), padding=10, relief="raised", background="#4CAF50", foreground="white")
style.map("Custom.TButton", background=[("active", "#45a049")])
style.configure("Custom.TRadiobutton", font=("Helvetica", 12), background="#d9e4f5", foreground="#333333")

# Generate Button
generate_button = ttk.Button(app, text="Generate Password", command=generate_password, style="Custom.TButton")
generate_button.place(relx=0.5, y=250, anchor="center")

# Display Generated Password
password_frame = tk.Frame(app, bg="#d9e4f5")
password_frame.place(relx=0.5, y=320, anchor="center")
password_label = tk.Label(password_frame, text="Generated Password:", font=("Helvetica", 12), bg="#d9e4f5", fg="#333333")
password_label.grid(row=0, column=0, padx=10)
password_entry = ttk.Entry(password_frame, width=30)
password_entry.grid(row=0, column=1, padx=10)

# Run the application
app.mainloop()
