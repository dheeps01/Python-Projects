import tkinter as tk
from tkinter import messagebox
import json

# File to store contacts
CONTACTS_FILE = "contacts.json"

# Load contacts from file or initialize an empty list
def load_contacts():
    try:
        with open(CONTACTS_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# Save contacts to file
def save_contacts(contacts):
    with open(CONTACTS_FILE, "w") as file:
        json.dump(contacts, file, indent=4)

# Add a new contact
def add_contact():
    name = name_entry.get().strip()
    phone = phone_entry.get().strip()
    email = email_entry.get().strip()
    address = address_entry.get().strip()

    if not name or not phone:
        messagebox.showwarning("Input Error", "Name and Phone are required fields!")
        return

    contacts.append({
        "name": name,
        "phone": phone,
        "email": email,
        "address": address
    })
    save_contacts(contacts)
    messagebox.showinfo("Success", f"Contact {name} added successfully!")
    clear_entries()
    update_contact_list()

# View all contacts
def update_contact_list():
    contact_list.delete(0, tk.END)
    for contact in contacts:
        contact_list.insert(tk.END, f"{contact['name']} ({contact['phone']})")

# Search for a contact
def search_contact():
    query = search_entry.get().strip().lower()
    contact_list.delete(0, tk.END)
    for contact in contacts:
        if query in contact['name'].lower() or query in contact['phone']:
            contact_list.insert(tk.END, f"{contact['name']} ({contact['phone']})")
            display_contact_details(contact)

# Display full details of a contact
def display_contact_details(contact):
    details_label.config(text=f"Name: {contact['name']}\nPhone: {contact['phone']}\nEmail: {contact['email']}\nAddress: {contact['address']}")

# Update a contact
def update_contact():
    selected = contact_list.curselection()
    if not selected:
        messagebox.showwarning("Selection Error", "No contact selected!")
        return

    index = selected[0]
    contact = contacts[index]

    contact['name'] = name_entry.get().strip() or contact['name']
    contact['phone'] = phone_entry.get().strip() or contact['phone']
    contact['email'] = email_entry.get().strip() or contact['email']
    contact['address'] = address_entry.get().strip() or contact['address']

    save_contacts(contacts)
    messagebox.showinfo("Success", "Contact updated successfully!")
    clear_entries()
    update_contact_list()

# Delete a contact
def delete_contact():
    selected = contact_list.curselection()
    if not selected:
        messagebox.showwarning("Selection Error", "No contact selected!")
        return

    index = selected[0]
    contact = contacts.pop(index)
    save_contacts(contacts)
    messagebox.showinfo("Success", f"Contact {contact['name']} deleted successfully!")
    update_contact_list()

# Clear entry fields
def clear_entries():
    name_entry.delete(0, tk.END)
    phone_entry.delete(0, tk.END)
    email_entry.delete(0, tk.END)
    address_entry.delete(0, tk.END)
    details_label.config(text="")

# Initialize main window
root = tk.Tk()
root.title("Contact Book")
root.geometry("600x550")
root.configure(bg="#ffe4e1")

# Load contacts
global contacts
contacts = load_contacts()

# Header Label
header_label = tk.Label(root, text="Contact Book", font=("Helvetica", 18, "bold"), bg="#ffe4e1", fg="#8b0000")
header_label.pack(pady=10)

# Create UI elements
frame = tk.Frame(root, padx=10, pady=10, bg="#ffe4e1")
frame.pack()

# Input fields
name_label = tk.Label(frame, text="Name:", bg="#ffe4e1", fg="#8b0000")
name_label.grid(row=0, column=0, sticky="e")
name_entry = tk.Entry(frame, width=30)
name_entry.grid(row=0, column=1)

phone_label = tk.Label(frame, text="Phone:", bg="#ffe4e1", fg="#8b0000")
phone_label.grid(row=1, column=0, sticky="e")
phone_entry = tk.Entry(frame, width=30)
phone_entry.grid(row=1, column=1)

email_label = tk.Label(frame, text="Email:", bg="#ffe4e1", fg="#8b0000")
email_label.grid(row=2, column=0, sticky="e")
email_entry = tk.Entry(frame, width=30)
email_entry.grid(row=2, column=1)

address_label = tk.Label(frame, text="Address:", bg="#ffe4e1", fg="#8b0000")
address_label.grid(row=3, column=0, sticky="e")
address_entry = tk.Entry(frame, width=30)
address_entry.grid(row=3, column=1)

# Buttons
add_button = tk.Button(frame, text="Add Contact", command=add_contact, bg="#ff7f50", fg="white")
add_button.grid(row=4, column=0, pady=10)

update_button = tk.Button(frame, text="Update Contact", command=update_contact, bg="#ffa07a", fg="white")
update_button.grid(row=4, column=1, pady=10)

search_label = tk.Label(frame, text="Search:", bg="#ffe4e1", fg="#8b0000")
search_label.grid(row=5, column=0, sticky="e")
search_entry = tk.Entry(frame, width=30)
search_entry.grid(row=5, column=1)

search_button = tk.Button(frame, text="Search", command=search_contact, bg="#ff6347", fg="white")
search_button.grid(row=6, column=1, pady=5, sticky="e")

# Contact list header
contact_list_header = tk.Label(frame, text="Contacts:", font=("Helvetica", 14, "bold"), bg="#ffe4e1", fg="#8b0000")
contact_list_header.grid(row=7, column=0, columnspan=2, pady=5)

# Contact list
contact_list = tk.Listbox(frame, width=50, height=10, bg="#fff5ee", fg="#8b0000")
contact_list.grid(row=8, column=0, columnspan=2, pady=10)

# Details display
details_label = tk.Label(frame, text="", bg="#ffe4e1", fg="#8b0000", justify="left")
details_label.grid(row=9, column=0, columnspan=2, pady=10)

# Delete button
delete_button = tk.Button(frame, text="Delete Contact", command=delete_contact, bg="#cd5c5c", fg="white")
delete_button.grid(row=10, column=1, pady=10, sticky="e")

# Populate contact list
update_contact_list()

# Start the application
root.mainloop()
